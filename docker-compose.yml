version: '3.8'

services:
  # Servicio de base de datos MySQL
  db:
    image: mysql:8.0
    container_name: reservas_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: reservas_db
      MYSQL_USER: reservas_user
      MYSQL_PASSWORD: reservas_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # ← Ejecuta init.sql automáticamente
    networks:
      - reservas_network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -prootpassword --silent 2>/dev/null | grep 'mysqld is alive'"]
      timeout: 30s
      retries: 15
      interval: 15s
      start_period: 60s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: reservas_phpmyadmin
    restart: always
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: rootpassword
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "8080:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - reservas_network

  # Servicio de backend Flask con Socket.IO
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: reservas_backend
    restart: always
    environment:
      MYSQL_HOST: db
      MYSQL_USER: reservas_user
      MYSQL_PASSWORD: reservas_password
      MYSQL_DATABASE: reservas_db
      MYSQL_PORT: 3306
    ports:
      - "5000:5000"
    networks:
      - reservas_network

  # Servicio de frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: reservas_frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - reservas_network

  # Microservicio de notificaciones
  notifications:
    build:
      context: .
      dockerfile: Dockerfile.notifications
    container_name: reservas_notifications
    restart: always
    environment:
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-}
      BACKEND_URL: http://backend:5000
      MYSQL_USER: reservas_user
      MYSQL_PASSWORD: reservas_password
      MYSQL_HOST: db
      MYSQL_DATABASE: reservas_db
    ports:
      - "8001:8001"
    depends_on:
      - db
    networks:
      - reservas_network

volumes:
  mysql_data:

networks:
  reservas_network:
    driver: bridge
